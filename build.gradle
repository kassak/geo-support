import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

buildscript {
  repositories {
    maven { setUrl("https://jitpack.io") }
  }
  dependencies {
    classpath "com.github.hurricup:gradle-grammar-kit-plugin:2017.1.1"
  }
}

plugins {
  id 'org.jetbrains.intellij' version "0.2.17"
}
repositories {
  maven { url 'http://maven.geotoolkit.org/' }
  maven { url 'http://repo.boundlessgeo.com/main/' }
  maven { url 'http://download.osgeo.org/webdav/geotools/' }
  mavenCentral()
  ivy {
    url 'https://github.com/'
    layout 'pattern', {
      artifact '/JetBrains/intellij-community/raw/[revision]/tools/lexer/[module].[ext]' //JFlex + .skeleton
    }
  }
}
configurations { gen }
dependencies {
  //https://github.com/JetBrains/intellij-community/raw/c1fdf11ac00eb769310e481e96c16ce0f48044d2/tools/lexer/idea-flex.skeleton
  gen ':idea-flex:c1fdf11ac00eb769310e481e96c16ce0f48044d2@skeleton'
}

allprojects {
  version 0.01

  apply plugin: 'java'
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  sourceSets {
    main {
      java.srcDirs 'main/src', 'main/gen'
      resources.srcDirs 'main/resources'
    }
    test {
      java.srcDir 'tests/src'
      resources.srcDirs 'tests/testData'
    }
  }
  apply plugin: 'org.jetbrains.intellij'
  intellij {
    pluginName 'geo-support'
    version 'IC-173.4301.14'
    type 'IC'
  }

  apply plugin: 'idea'
  idea {
    module {
      generatedSourceDirs += file('main/gen')
    }
  }

  dependencies {
    def noLog = { exclude group: 'commons-logging', module: 'commons-logging' }
    compile 'org.geotools:gt-geometry:18.1', noLog
    compile 'org.geotools:gt-swing:18.1', noLog
    compile 'org.geotools:gt-wms:18.1', noLog
    compile 'org.geotools:gt-wmts:18.1', noLog
    compile 'org.geotools:gt-epsg-hsql:18.1', noLog
  }
}

apply plugin: 'org.jetbrains.grammarkit'

task generateParser(type: GenerateParser) {
  source = "main/src/com/github/kassak/geo/wkt/wkt.bnf"
  pathToParser = '/com/github/kassak/geo/wkt/WktParser.java'
  pathToPsiRoot = '/com/github/kassak/geo/wkt/psi'
  targetRoot = 'main/gen'
  purgeOldFiles = true
}

task generateLexer(type: GenerateLexer) {
  source = "main/src/com/github/kassak/geo/wkt/wkt.flex"
  targetDir = "main/gen/com/github/kassak/geo/wkt/"
  targetClass = "_WktLexer"
  skeleton = configurations.gen.files(configurations.gen.dependencies.find { it.name == "idea-flex" }).first()
}


compileJava.dependsOn generateLexer
compileJava.dependsOn generateParser


publishPlugin {
  username project.properties.get("publish.user")
  password project.properties.get("publish.password")
  channels project.properties.get("publish.channel") ?: "nightly"
}
